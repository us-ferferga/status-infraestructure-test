services:
  ############### MICROSERVICES ###############
  status-backend:
    restart: always
    container_name: status-backend
    build:
      context: ./status-backend
      dockerfile: Dockerfile
    command: sh -c "rm -rf node_modules && npm install && npm run dev"
    ports:
      - "3001:3001"
    networks:
      - web_network
      - mysql_network
    depends_on:
      mysql:
        condition: service_healthy
  # ================================================
  status-frontend:
    restart: always
    container_name: status-frontend
    build:
      context: ./status-frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    networks:
      - web_network
  # ================================================
  nodered:
    restart: always
    container_name: node-red-status
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "1880:1880"
    volumes:
      - ./settings.js:/data/settings.js
      - ./node-red-status:/data
    command: node-red
    networks:
      - web_network
  # ================================================
  bluejay-render:
    platform: linux/amd64
    container_name: bluejay-render
    image: governify/render:develop
    environment:
      - NODE_ENV=production
      - PORT=80
      - LAYOUT=bootstrap5.html
      - LOGIN_USER=${USER_RENDER:?}
      - LOGIN_PASSWORD=${PASS_RENDER:?}
      - DEFAULT_VIEW=http://host.docker.internal:5200/api/v1/public/renders/index/view.html
      - DEFAULT_CONTROLLER=http://host.docker.internal:5200/api/v1/public/renders/index/controller.js
      - DEFAULT_MODEL=http://host.docker.internal:5200/api/v1/public/renders/index/model.json
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    volumes:
      - "../logs/render:/opt/app/logs"
    ports:
      - "5100:80"
    depends_on:
      - bluejay-assets-manager
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-assets-manager:
    platform: linux/amd64
    container_name: bluejay-assets-manager
    image: "governify/assets-manager:develop"
    environment:
      - NODE_ENV=production
      - PORT=80
      - LOGIN_USER=${USER_ASSETS:?}
      - LOGIN_PASSWORD=${PASS_ASSETS:?}
      - PRIVATE_KEY=${KEY_ASSETS_MANAGER_PRIVATE:?}
      - GOV_INFRASTRUCTURE=/home/project/public/infrastructure-local.yaml
      - ASSETS_REPOSITORY=https://github.com/governify/assets-bluejay
      - ASSETS_REPOSITORY_BRANCH=${ASSETS_REPOSITORY_BRANCH:?}
    volumes:
      - "../assets:/home/project"
    ports:
      - "5200:80"
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-reporter:
    platform: linux/amd64
    container_name: bluejay-reporter
    image: governify/reporter:develop
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    volumes:
      - "../logs/bluejay-reporter:/opt/app/logs"
    ports:
      - "5300:80"
    mem_limit: 400m
    restart: "unless-stopped"
    depends_on:
      - bluejay-assets-manager
      - bluejay-mongo-registry
      - bluejay-influx-reporter
  # ================================================
  bluejay-registry:
    platform: linux/amd64
    container_name: bluejay-registry
    image: "governify/registry:v3.7.0"
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    volumes:
      - "../logs/registry:/opt/app/logs"
      - "../static:/opt/app/public/static"
    ports:
      - "5400:80"
    depends_on:
      - bluejay-assets-manager
      - bluejay-mongo-registry
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-collector-events:
    platform: linux/amd64
    container_name: bluejay-collector-events
    build:
      context: ./collector-events
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=80
      - KEY_SCOPE_MANAGER=${KEY_SCOPE_MANAGER}
      - KEY_GITHUB=${KEY_GITHUB}
      - KEY_PIVOTAL=${KEY_PIVOTAL}
      - KEY_TRAVIS_PUBLIC=${KEY_TRAVIS_PUBLIC}
      - KEY_TRAVIS_PRIVATE=${KEY_TRAVIS_PRIVATE}
      - KEY_HEROKU=${KEY_HEROKU}
      - KEY_CODECLIMATE=${KEY_CODECLIMATE}
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    ports:
      - "5500:80"
    depends_on:
      - bluejay-assets-manager
      - bluejay-redis-ec
    mem_limit: 700m
    restart: "unless-stopped"
  # ================================================
  bluejay-dashboard:
    platform: linux/amd64
    container_name: bluejay-dashboard
    image: governify/dashboard:develop
    environment:
      - NODE_ENV=production
      - INFLUX_URL=http://host.docker.internal:5002
      - GF_PATHS_PLUGINS=/usr/share/grafana/plugins
    volumes:
      - "bluejay-dashboard-volume:/var/lib/grafana"
    ports:
      - "5600:3000"
    depends_on:
      - bluejay-assets-manager
      - bluejay-reporter
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-director:
    platform: linux/amd64
    container_name: bluejay-director
    image: "governify/director:develop"
    environment:
      - INFLUXDB_BIND_ADDRESS=:8088
      - NODE_ENV=production
      - PORT=80
      - KEY_ASSETS_MANAGER_PRIVATE=${KEY_ASSETS_MANAGER_PRIVATE}
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    ports:
      - "5800:80"
    depends_on:
      - bluejay-assets-manager
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-scope-manager:
    platform: linux/amd64
    container_name: bluejay-scope-manager
    image: "governify/scope-manager:develop"
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY}
      - NODE_ENV=production
      - PORT=80
      - KEY_ASSETS_MANAGER_PRIVATE=${KEY_ASSETS_MANAGER_PRIVATE}
      - KEY_SCOPE_MANAGER=${KEY_SCOPE_MANAGER}
      - KEY_HEROKU=${KEY_HEROKU}
      - KEY_PIVOTAL=${KEY_PIVOTAL}
      - KEY_GITHUB=${KEY_GITHUB}
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    ports:
      - "5700:80"
    depends_on:
      - bluejay-assets-manager
    mem_limit: 400m
    restart: "unless-stopped"
  # ================================================
  bluejay-join:
    platform: linux/amd64
    container_name: bluejay-join
    image: "governify/join-bluejay:develop"
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY}
      - KEY_GITHUB=${KEY_GITHUB}
      - NODE_ENV=development
      - PORT=80
    ports:
      - "6001:80"
    mem_limit: 400m
    restart: "unless-stopped"
  ############### DATABASES ###############
  bluejay-influx-reporter:
    platform: linux/amd64
    image: "influxdb:1.8.4-alpine"
    container_name: bluejay-influx-reporter
    environment:
      - INFLUXDB_BIND_ADDRESS=:8088
    volumes:
      - "bluejay-influx-reporter-volume:/var/lib/influxdb"
      - "../configurations/influxdb:/etc/influxdb"
    ports:
      - "5002:8086"
      - "8088:8088"
    mem_limit: 1200m
    restart: "unless-stopped"
  # ================================================
  bluejay-mongo-registry:
    # platform: linux/amd64
    container_name: bluejay-mongo-registry
    image: mongo
    volumes:
      - "bluejay-mongo-registry-volume:/data/db"
    ports:
      - "5001:27017"
    #mem_limit: 2000m
    mem_limit: 3000m
    restart: "unless-stopped"
  # ================================================
  bluejay-redis-ec:
    platform: linux/amd64
    container_name: bluejay-redis-ec
    image: redis
    volumes:
      - "bluejay-redis-ec-volume:/data"
    ports:
      - "5003:6379"
    mem_limit: 1200m
    restart: "unless-stopped"
  # ================================================
  mysql:
    restart: always
    image: mysql:8.3.0
    container_name: mysql
    expose:
      - "3306"
    networks:
      - mysql_network
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_ALLOW_EMPTY_PASSWORD: yes
    healthcheck:
      test: ["CMD-SHELL", "sleep 20 && exit 0"]
      interval: 1s
      timeout: 22s
      retries: 5
    ports:
      - "3306:3306"
    volumes:
      - ./mysql:/var/lib/mysql
networks:
  mysql_network:
    driver: bridge
  web_network:
    driver: bridge

volumes:
  bluejay-influx-reporter-volume: null
  bluejay-mongo-registry-volume: null
  bluejay-dashboard-volume: null
  bluejay-redis-ec-volume: null
  nodered:
    name: node-red-status
  mysql:
    name: mysql
